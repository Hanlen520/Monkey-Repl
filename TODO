# find visible view
let valid = (bounds) => {
    let rect = bounds.match(/\[(-?\d+),(-?\d+)\]\[(-?\d+),(-?\d+)\]/).slice(1).map(o => parseInt(o))
    // console.log(rect);
    return (rect[0] < 1080 - 5) && (rect[2] > 5) && (rect[2] - rect[0] > 5) && (rect[3] - rect[1] > 5)
}

let loop = (o) => {
    o.childrens = o.childrens.filter(n => {
        if (!n.isVisibleToUser) {
            return false
        }
        let v = valid(n.bounds)
        if (v) {
            return true
        }
        if (n.childrens.length > 0) {
            return true
        }
        return false;
    })
    o.childrens.forEach(e => loop(e))
}

let mm = 50
while (mm--) {
    loop(obj)
}

console.log(JSON.stringify(obj));


let getRect = (bounds) => bounds.match(/\[(-?\d+),(-?\d+)\]\[(-?\d+),(-?\d+)\]/).slice(1).map(o => parseInt(o))
let filterVisible = (tree) => { let loop = (o, w, h, gap) => o.childrens = o.childrens.filter(n => { loop(n, w, h, gap); let r = getRect(n.bounds); return n.childrens > 0 || (r[0] < w - gap && r[1] < h - gap && r[2] > gap && r[3] > gap && r[2] - r[0] > gap && r[3] - r[1] > 5) }); let rect = getRect(tree.bounds); loop(tree, rect[2] - rect[0], rect[3] - rect[1], 5) }

